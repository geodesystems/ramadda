/*
* Copyright (c) 2008-2019 Geode Systems LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package org.ramadda.util;


import ucar.unidata.util.TwoFacedObject;

import java.awt.Color;

import java.util.ArrayList;
import java.util.List;


/**
 *
 *
 * @author Jeff McWhirter
 * @version $Revision: 1.3 $
 */
public class ColorTable {

    /** _more_ */
    private static List<ColorTable> tables = new ArrayList<ColorTable>();

    /** _more_ */
    private String id;

    /** _more_ */
    private String name;

    /** _more_ */
    private int[][] table;

    /** _more_ */
    private List<Color> colors;

    /**
     * _more_
     *
     * @param id _more_
     * @param name _more_
     * @param table _more_
     */
    public ColorTable(String id, String name, int[][] table) {
        this.id    = id;
        this.name  = name;
        this.table = table;
        tables.add(this);
    }

    /**
     * _more_
     *
     * @param id _more_
     * @param name _more_
     * @param s _more_
     */
    public ColorTable(String id, String name, String[] s) {
        this.id    = id;
        this.name  = name;
        this.table = new int[s.length][];
        for (int i = 0; i < s.length; i++) {
            Color c = HtmlUtils.decodeColor(s[i], null);
            if (c == null) {
                continue;
            }
            this.table[i] = new int[] { c.getRed(), c.getGreen(),
                                        c.getBlue() };
        }
        tables.add(this);
    }

    /**
     * _more_
     *
     * @return _more_
     */
    public List<Color> getColors() {
        if (colors == null) {
            colors = new ArrayList<Color>();
            for (int[] rgb : table) {
                colors.add(new Color(rgb[0], rgb[1], rgb[2]));
            }
        }

        return colors;
    }

    /**
     * Set the Id property.
     *
     * @param value The new value for Id
     */
    public void setId(String value) {
        id = value;
    }

    /**
     * Get the Id property.
     *
     * @return The Id
     */
    public String getId() {
        return id;
    }

    /**
     * Set the Name property.
     *
     * @param value The new value for Name
     */
    public void setName(String value) {
        name = value;
    }

    /**
     * Get the Name property.
     *
     * @return The Name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the Table property.
     *
     * @param value The new value for Table
     */
    public void setTable(int[][] value) {
        table = value;
    }

    /**
     * Get the Table property.
     *
     * @return The Table
     */
    public int[][] getTable() {
        return table;
    }


    /**
     * _more_
     *
     * @param min _more_
     * @param max _more_
     * @param value _more_
     *
     * @return _more_
     */
    public Color getColor(double min, double max, double value) {
        double denom   = (max - min);
        double percent = ((denom == 0)
                          ? Double.NaN
                          : (value - min) / denom);

        //        System.err.println(name+" getColor:" + min +" " + max +" " + value +" " + percent);
        return getColor(percent);
    }

    /**
     * get the Color by finding the index of the percent along the table
     *
     * @param table color table
     * @param percent percent into color table (0-1)
     *
     * @return the color
     */
    public Color getColor(double percent) {
        colors = getColors();
        int index = (int) (percent * colors.size()) - 1;
        if (index < 0) {
            index = 0;
        }
        if (index >= colors.size()) {
            index = colors.size() - 1;
        }

        //        System.err.println("index:" + index);
        return colors.get(index);
    }


    public Color getColorByIndex(int index) {
        colors = getColors();
        if(index>=colors.size()) {
            index = index%colors.size();
        }
        return colors.get(index);
    }

    /**
     * get the pixel value in the table from the percent
     *
     * @param table the table
     * @param percent the percent
     *
     * @return the pixel value
     */
    public int getPixelValue(double percent) {
        Color c = getColor(percent);

        return ((0xff << 24) | (c.getRed() << 16) | (c.getGreen() << 8)
                | c.getBlue());
    }

    /**
     * _more_
     */
    public static void makeTables() {

        if (tables.size() > 0) {
            return;
        }
        new ColorTable("blues", "blues", new String[] {
            "rgb(255,255,255)", "rgb(246,246,255)", "rgb(237,237,255)",
            "rgb(228,228,255)", "rgb(219,219,255)", "rgb(211,211,255)",
            "rgb(202,202,255)", "rgb(193,193,255)", "rgb(184,184,255)",
            "rgb(175,175,255)", "rgb(167,167,255)", "rgb(158,158,255)",
            "rgb(149,149,255)", "rgb(140,140,255)", "rgb(131,131,255)",
            "rgb(123,123,255)", "rgb(114,114,255)", "rgb(105,105,255)",
            "rgb(96,96,255)", "rgb(87,87,255)", "rgb(79,79,255)",
            "rgb(70,70,255)", "rgb(61,61,255)", "rgb(52,52,255)",
            "rgb(43,43,255)", "rgb(35,35,255)", "rgb(26,26,255)",
            "rgb(17,17,255)", "rgb(8,8,255)", "rgb(0,0,255)",
        });
        new ColorTable("blue_green_red", "blue_green_red", new String[] {
            "rgb(0,0,255)", "rgb(8,17,246)", "rgb(17,35,237)",
            "rgb(26,52,228)", "rgb(35,70,219)", "rgb(43,87,211)",
            "rgb(52,105,202)", "rgb(61,123,193)", "rgb(70,140,184)",
            "rgb(79,158,175)", "rgb(87,175,167)", "rgb(96,193,158)",
            "rgb(105,211,149)", "rgb(114,228,140)", "rgb(123,246,131)",
            "rgb(131,246,123)", "rgb(140,228,114)", "rgb(149,211,105)",
            "rgb(158,193,96)", "rgb(167,175,87)", "rgb(175,158,79)",
            "rgb(184,140,70)", "rgb(193,123,61)", "rgb(202,105,52)",
            "rgb(211,87,43)", "rgb(219,70,35)", "rgb(228,52,26)",
            "rgb(237,35,17)", "rgb(246,17,8)", "rgb(255,0,0)",
        });
        new ColorTable("white_blue", "white_blue",
                       new String[] { "rgb(244,252,254)",
                                      "rgb(101,239,255)", "rgb(50,227,255)",
                                      "rgb(0,169,204)",
                                      "rgb(0,122,153)", });
        new ColorTable("blue_red", "blue_red", new String[] {
            "rgb(26,12,234)", "rgb(26,12,234)", "rgb(26,12,234)",
            "rgb(234,12,48)", "rgb(234,12,48)", "rgb(234,12,48)",
        });
        new ColorTable("red_white_blue", "red_white_blue", new String[] {
            "rgb(254,9,9)", "rgb(254,11,11)", "rgb(254,13,13)",
            "rgb(254,15,15)", "rgb(254,17,17)", "rgb(254,19,19)",
            "rgb(254,21,21)", "rgb(254,23,23)", "rgb(254,25,25)",
            "rgb(254,27,27)", "rgb(254,29,29)", "rgb(254,31,31)",
            "rgb(254,33,33)", "rgb(254,35,35)", "rgb(254,37,37)",
            "rgb(254,39,39)", "rgb(254,41,41)", "rgb(254,43,43)",
            "rgb(254,45,45)", "rgb(254,47,47)", "rgb(254,49,49)",
            "rgb(254,51,51)", "rgb(254,53,53)", "rgb(254,55,55)",
            "rgb(254,56,57)", "rgb(254,58,59)", "rgb(254,60,61)",
            "rgb(254,62,63)", "rgb(254,64,65)", "rgb(254,66,67)",
            "rgb(254,68,69)", "rgb(254,70,71)", "rgb(254,72,73)",
            "rgb(254,74,75)", "rgb(254,76,77)", "rgb(254,78,79)",
            "rgb(254,80,81)", "rgb(254,82,83)", "rgb(254,84,85)",
            "rgb(254,86,87)", "rgb(254,88,89)", "rgb(253,90,91)",
            "rgb(253,92,93)", "rgb(253,94,95)", "rgb(253,96,97)",
            "rgb(253,98,99)", "rgb(253,100,101)", "rgb(253,102,103)",
            "rgb(253,104,105)", "rgb(253,105,107)", "rgb(253,107,109)",
            "rgb(253,109,111)", "rgb(253,111,113)", "rgb(253,113,115)",
            "rgb(253,115,117)", "rgb(253,117,119)", "rgb(253,119,121)",
            "rgb(253,121,123)", "rgb(253,123,125)", "rgb(253,125,127)",
            "rgb(253,127,129)", "rgb(253,129,131)", "rgb(253,131,132)",
            "rgb(253,133,134)", "rgb(253,135,136)", "rgb(253,137,138)",
            "rgb(253,139,140)", "rgb(253,141,142)", "rgb(253,143,144)",
            "rgb(253,145,146)", "rgb(253,147,148)", "rgb(253,149,150)",
            "rgb(253,151,152)", "rgb(253,153,154)", "rgb(253,154,156)",
            "rgb(253,156,158)", "rgb(253,158,160)", "rgb(253,160,162)",
            "rgb(253,162,164)", "rgb(253,164,166)", "rgb(253,166,168)",
            "rgb(253,168,170)", "rgb(253,170,172)", "rgb(252,172,174)",
            "rgb(252,174,176)", "rgb(252,176,178)", "rgb(252,178,180)",
            "rgb(252,180,182)", "rgb(252,182,184)", "rgb(252,184,186)",
            "rgb(252,186,188)", "rgb(252,188,190)", "rgb(252,190,192)",
            "rgb(252,192,194)", "rgb(252,194,196)", "rgb(252,196,198)",
            "rgb(252,198,200)", "rgb(252,200,202)", "rgb(252,202,204)",
            "rgb(252,203,206)", "rgb(252,205,208)", "rgb(252,207,210)",
            "rgb(252,209,212)", "rgb(252,211,214)", "rgb(252,213,216)",
            "rgb(252,215,218)", "rgb(252,217,220)", "rgb(252,219,222)",
            "rgb(252,221,224)", "rgb(252,223,226)", "rgb(252,225,228)",
            "rgb(252,227,230)", "rgb(252,229,232)", "rgb(252,231,234)",
            "rgb(252,233,236)", "rgb(252,235,238)", "rgb(252,237,240)",
            "rgb(252,239,242)", "rgb(252,241,244)", "rgb(252,243,246)",
            "rgb(252,245,248)", "rgb(252,247,250)", "rgb(252,249,252)",
            "rgb(252,251,254)", "rgb(252,252,255)", "rgb(250,250,255)",
            "rgb(248,248,255)", "rgb(246,246,255)", "rgb(244,244,255)",
            "rgb(242,242,255)", "rgb(240,240,255)", "rgb(238,238,255)",
            "rgb(236,236,255)", "rgb(234,234,255)", "rgb(232,232,255)",
            "rgb(230,230,255)", "rgb(228,228,255)", "rgb(226,226,255)",
            "rgb(224,224,255)", "rgb(222,222,255)", "rgb(220,220,255)",
            "rgb(218,218,255)", "rgb(216,216,255)", "rgb(214,214,255)",
            "rgb(212,212,255)", "rgb(210,210,255)", "rgb(208,208,255)",
            "rgb(206,206,255)", "rgb(204,204,255)", "rgb(202,202,255)",
            "rgb(200,200,255)", "rgb(198,198,255)", "rgb(196,196,255)",
            "rgb(194,194,255)", "rgb(192,192,255)", "rgb(190,190,255)",
            "rgb(188,188,255)", "rgb(186,186,255)", "rgb(184,184,255)",
            "rgb(182,182,255)", "rgb(180,180,255)", "rgb(178,178,255)",
            "rgb(176,176,255)", "rgb(174,174,255)", "rgb(172,172,255)",
            "rgb(170,170,255)", "rgb(168,168,255)", "rgb(166,166,255)",
            "rgb(164,164,255)", "rgb(162,162,255)", "rgb(160,160,255)",
            "rgb(158,158,255)", "rgb(156,156,255)", "rgb(154,154,255)",
            "rgb(152,152,255)", "rgb(150,150,255)", "rgb(148,148,255)",
            "rgb(146,146,255)", "rgb(144,144,255)", "rgb(142,142,255)",
            "rgb(140,140,255)", "rgb(138,138,255)", "rgb(136,136,255)",
            "rgb(134,134,255)", "rgb(132,132,255)", "rgb(130,130,255)",
            "rgb(128,128,255)", "rgb(126,126,255)", "rgb(124,124,255)",
            "rgb(122,122,255)", "rgb(120,120,255)", "rgb(118,118,255)",
            "rgb(116,116,255)", "rgb(114,114,255)", "rgb(112,112,255)",
            "rgb(110,110,255)", "rgb(108,108,255)", "rgb(106,106,255)",
            "rgb(104,104,255)", "rgb(102,102,255)", "rgb(100,100,255)",
            "rgb(98,98,255)", "rgb(96,96,255)", "rgb(94,94,255)",
            "rgb(92,92,255)", "rgb(90,90,255)", "rgb(88,88,255)",
            "rgb(86,86,255)", "rgb(84,84,255)", "rgb(82,82,255)",
            "rgb(80,80,255)", "rgb(78,78,255)", "rgb(76,76,255)",
            "rgb(74,74,255)", "rgb(72,72,255)", "rgb(70,70,255)",
            "rgb(68,68,255)", "rgb(66,66,255)", "rgb(64,64,255)",
            "rgb(62,62,255)", "rgb(60,60,255)", "rgb(58,58,255)",
            "rgb(56,56,255)", "rgb(54,54,255)", "rgb(52,52,255)",
            "rgb(50,50,255)", "rgb(48,48,255)", "rgb(46,46,255)",
            "rgb(44,44,255)", "rgb(42,42,255)", "rgb(40,40,255)",
            "rgb(38,38,255)", "rgb(36,36,255)", "rgb(34,34,255)",
            "rgb(32,32,255)", "rgb(30,30,255)", "rgb(28,28,255)",
            "rgb(26,26,255)", "rgb(24,24,255)", "rgb(22,22,255)",
            "rgb(20,20,255)", "rgb(18,18,255)", "rgb(16,16,255)",
            "rgb(14,14,255)", "rgb(12,12,255)", "rgb(10,10,255)",
            "rgb(8,8,255)", "rgb(6,6,255)", "rgb(4,4,255)", "rgb(2,2,255)",
            "rgb(0,0,255)",
        });
        new ColorTable("blue_white_red", "blue_white_red", new String[] {
            "rgb(0,0,255)", "rgb(2,2,255)", "rgb(4,4,255)", "rgb(6,6,255)",
            "rgb(8,8,255)", "rgb(10,10,255)", "rgb(12,12,255)",
            "rgb(14,14,255)", "rgb(16,16,255)", "rgb(18,18,255)",
            "rgb(20,20,255)", "rgb(22,22,255)", "rgb(24,24,255)",
            "rgb(26,26,255)", "rgb(28,28,255)", "rgb(30,30,255)",
            "rgb(32,32,255)", "rgb(34,34,255)", "rgb(36,36,255)",
            "rgb(38,38,255)", "rgb(40,40,255)", "rgb(42,42,255)",
            "rgb(44,44,255)", "rgb(46,46,255)", "rgb(48,48,255)",
            "rgb(50,50,255)", "rgb(52,52,255)", "rgb(54,54,255)",
            "rgb(56,56,255)", "rgb(58,58,255)", "rgb(60,60,255)",
            "rgb(62,62,255)", "rgb(64,64,255)", "rgb(66,66,255)",
            "rgb(68,68,255)", "rgb(70,70,255)", "rgb(72,72,255)",
            "rgb(74,74,255)", "rgb(76,76,255)", "rgb(78,78,255)",
            "rgb(80,80,255)", "rgb(82,82,255)", "rgb(84,84,255)",
            "rgb(86,86,255)", "rgb(88,88,255)", "rgb(90,90,255)",
            "rgb(92,92,255)", "rgb(94,94,255)", "rgb(96,96,255)",
            "rgb(98,98,255)", "rgb(100,100,255)", "rgb(102,102,255)",
            "rgb(104,104,255)", "rgb(106,106,255)", "rgb(108,108,255)",
            "rgb(110,110,255)", "rgb(112,112,255)", "rgb(114,114,255)",
            "rgb(116,116,255)", "rgb(118,118,255)", "rgb(120,120,255)",
            "rgb(122,122,255)", "rgb(124,124,255)", "rgb(126,126,255)",
            "rgb(128,128,255)", "rgb(130,130,255)", "rgb(132,132,255)",
            "rgb(134,134,255)", "rgb(136,136,255)", "rgb(138,138,255)",
            "rgb(140,140,255)", "rgb(142,142,255)", "rgb(144,144,255)",
            "rgb(146,146,255)", "rgb(148,148,255)", "rgb(150,150,255)",
            "rgb(152,152,255)", "rgb(154,154,255)", "rgb(156,156,255)",
            "rgb(158,158,255)", "rgb(160,160,255)", "rgb(162,162,255)",
            "rgb(164,164,255)", "rgb(166,166,255)", "rgb(168,168,255)",
            "rgb(170,170,255)", "rgb(172,172,255)", "rgb(174,174,255)",
            "rgb(176,176,255)", "rgb(178,178,255)", "rgb(180,180,255)",
            "rgb(182,182,255)", "rgb(184,184,255)", "rgb(186,186,255)",
            "rgb(188,188,255)", "rgb(190,190,255)", "rgb(192,192,255)",
            "rgb(194,194,255)", "rgb(196,196,255)", "rgb(198,198,255)",
            "rgb(200,200,255)", "rgb(202,202,255)", "rgb(204,204,255)",
            "rgb(206,206,255)", "rgb(208,208,255)", "rgb(210,210,255)",
            "rgb(212,212,255)", "rgb(214,214,255)", "rgb(216,216,255)",
            "rgb(218,218,255)", "rgb(220,220,255)", "rgb(222,222,255)",
            "rgb(224,224,255)", "rgb(226,226,255)", "rgb(228,228,255)",
            "rgb(230,230,255)", "rgb(232,232,255)", "rgb(234,234,255)",
            "rgb(236,236,255)", "rgb(238,238,255)", "rgb(240,240,255)",
            "rgb(242,242,255)", "rgb(244,244,255)", "rgb(246,246,255)",
            "rgb(248,248,255)", "rgb(250,250,255)", "rgb(252,252,255)",
            "rgb(252,251,254)", "rgb(252,249,252)", "rgb(252,247,250)",
            "rgb(252,245,248)", "rgb(252,243,246)", "rgb(252,241,244)",
            "rgb(252,239,242)", "rgb(252,237,240)", "rgb(252,235,238)",
            "rgb(252,233,236)", "rgb(252,231,234)", "rgb(252,229,232)",
            "rgb(252,227,230)", "rgb(252,225,228)", "rgb(252,223,226)",
            "rgb(252,221,224)", "rgb(252,219,222)", "rgb(252,217,220)",
            "rgb(252,215,218)", "rgb(252,213,216)", "rgb(252,211,214)",
            "rgb(252,209,212)", "rgb(252,207,210)", "rgb(252,205,208)",
            "rgb(252,203,206)", "rgb(252,202,204)", "rgb(252,200,202)",
            "rgb(252,198,200)", "rgb(252,196,198)", "rgb(252,194,196)",
            "rgb(252,192,194)", "rgb(252,190,192)", "rgb(252,188,190)",
            "rgb(252,186,188)", "rgb(252,184,186)", "rgb(252,182,184)",
            "rgb(252,180,182)", "rgb(252,178,180)", "rgb(252,176,178)",
            "rgb(252,174,176)", "rgb(252,172,174)", "rgb(253,170,172)",
            "rgb(253,168,170)", "rgb(253,166,168)", "rgb(253,164,166)",
            "rgb(253,162,164)", "rgb(253,160,162)", "rgb(253,158,160)",
            "rgb(253,156,158)", "rgb(253,154,156)", "rgb(253,153,154)",
            "rgb(253,151,152)", "rgb(253,149,150)", "rgb(253,147,148)",
            "rgb(253,145,146)", "rgb(253,143,144)", "rgb(253,141,142)",
            "rgb(253,139,140)", "rgb(253,137,138)", "rgb(253,135,136)",
            "rgb(253,133,134)", "rgb(253,131,132)", "rgb(253,129,131)",
            "rgb(253,127,129)", "rgb(253,125,127)", "rgb(253,123,125)",
            "rgb(253,121,123)", "rgb(253,119,121)", "rgb(253,117,119)",
            "rgb(253,115,117)", "rgb(253,113,115)", "rgb(253,111,113)",
            "rgb(253,109,111)", "rgb(253,107,109)", "rgb(253,105,107)",
            "rgb(253,104,105)", "rgb(253,102,103)", "rgb(253,100,101)",
            "rgb(253,98,99)", "rgb(253,96,97)", "rgb(253,94,95)",
            "rgb(253,92,93)", "rgb(253,90,91)", "rgb(254,88,89)",
            "rgb(254,86,87)", "rgb(254,84,85)", "rgb(254,82,83)",
            "rgb(254,80,81)", "rgb(254,78,79)", "rgb(254,76,77)",
            "rgb(254,74,75)", "rgb(254,72,73)", "rgb(254,70,71)",
            "rgb(254,68,69)", "rgb(254,66,67)", "rgb(254,64,65)",
            "rgb(254,62,63)", "rgb(254,60,61)", "rgb(254,58,59)",
            "rgb(254,56,57)", "rgb(254,55,55)", "rgb(254,53,53)",
            "rgb(254,51,51)", "rgb(254,49,49)", "rgb(254,47,47)",
            "rgb(254,45,45)", "rgb(254,43,43)", "rgb(254,41,41)",
            "rgb(254,39,39)", "rgb(254,37,37)", "rgb(254,35,35)",
            "rgb(254,33,33)", "rgb(254,31,31)", "rgb(254,29,29)",
            "rgb(254,27,27)", "rgb(254,25,25)", "rgb(254,23,23)",
            "rgb(254,21,21)", "rgb(254,19,19)", "rgb(254,17,17)",
            "rgb(254,15,15)", "rgb(254,13,13)", "rgb(254,11,11)",
            "rgb(254,9,9)",
        });
        new ColorTable("grayscale", "grayscale", new String[] {
            "#000", "#111", "#222", "#333", "#444", "#555", "#666", "#777",
            "#888", "#999", "#aaa", "#bbb", "#ccc", "#ddd", "#eee", "#fff",
        });
        new ColorTable("inversegrayscale", "inversegrayscale", new String[] {
            "#fff", "#eee", "#ddd", "#ccc", "#bbb", "#aaa", "#999", "#888",
            "#777", "#666", "#555", "#444", "#333", "#222", "#111", "#000",
        });
        new ColorTable("rainbow", "rainbow", new String[] {
            "red", "orange", "yellow", "green", "blue", "indigo", "violet",
        });
        new ColorTable("nice", "nice", new String[] {
            "#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b",
            "#e377c2", "#7f7f7f", "#bcbd22", "#17becf",
        });
        new ColorTable("gray_scale", "gray_scale", new String[] {
            "rgb(0,0,0)", "rgb(1,1,1)", "rgb(2,2,2)", "rgb(3,3,3)",
            "rgb(4,4,4)", "rgb(5,5,5)", "rgb(6,6,6)", "rgb(7,7,7)",
            "rgb(8,8,8)", "rgb(9,9,9)", "rgb(10,10,10)", "rgb(11,11,11)",
            "rgb(12,12,12)", "rgb(13,13,13)", "rgb(14,14,14)",
            "rgb(15,15,15)", "rgb(16,16,16)", "rgb(17,17,17)",
            "rgb(18,18,18)", "rgb(19,19,19)", "rgb(20,20,20)",
            "rgb(21,21,21)", "rgb(22,22,22)", "rgb(23,23,23)",
            "rgb(24,24,24)", "rgb(25,25,25)", "rgb(26,26,26)",
            "rgb(27,27,27)", "rgb(28,28,28)", "rgb(29,29,29)",
            "rgb(30,30,30)", "rgb(31,31,31)", "rgb(32,32,32)",
            "rgb(33,33,33)", "rgb(34,34,34)", "rgb(35,35,35)",
            "rgb(36,36,36)", "rgb(37,37,37)", "rgb(38,38,38)",
            "rgb(39,39,39)", "rgb(40,40,40)", "rgb(41,41,41)",
            "rgb(42,42,42)", "rgb(43,43,43)", "rgb(44,44,44)",
            "rgb(45,45,45)", "rgb(46,46,46)", "rgb(47,47,47)",
            "rgb(48,48,48)", "rgb(49,49,49)", "rgb(50,50,50)",
            "rgb(51,51,51)", "rgb(52,52,52)", "rgb(53,53,53)",
            "rgb(54,54,54)", "rgb(55,55,55)", "rgb(56,56,56)",
            "rgb(57,57,57)", "rgb(58,58,58)", "rgb(59,59,59)",
            "rgb(60,60,60)", "rgb(61,61,61)", "rgb(62,62,62)",
            "rgb(63,63,63)", "rgb(64,64,64)", "rgb(65,65,65)",
            "rgb(66,66,66)", "rgb(67,67,67)", "rgb(68,68,68)",
            "rgb(69,69,69)", "rgb(70,70,70)", "rgb(71,71,71)",
            "rgb(72,72,72)", "rgb(73,73,73)", "rgb(74,74,74)",
            "rgb(75,75,75)", "rgb(76,76,76)", "rgb(77,77,77)",
            "rgb(78,78,78)", "rgb(79,79,79)", "rgb(80,80,80)",
            "rgb(81,81,81)", "rgb(82,82,82)", "rgb(83,83,83)",
            "rgb(84,84,84)", "rgb(85,85,85)", "rgb(86,86,86)",
            "rgb(87,87,87)", "rgb(88,88,88)", "rgb(89,89,89)",
            "rgb(90,90,90)", "rgb(91,91,91)", "rgb(92,92,92)",
            "rgb(93,93,93)", "rgb(94,94,94)", "rgb(95,95,95)",
            "rgb(96,96,96)", "rgb(97,97,97)", "rgb(98,98,98)",
            "rgb(99,99,99)", "rgb(100,100,100)", "rgb(101,101,101)",
            "rgb(102,102,102)", "rgb(103,103,103)", "rgb(104,104,104)",
            "rgb(105,105,105)", "rgb(106,106,106)", "rgb(107,107,107)",
            "rgb(108,108,108)", "rgb(109,109,109)", "rgb(110,110,110)",
            "rgb(111,111,111)", "rgb(112,112,112)", "rgb(113,113,113)",
            "rgb(114,114,114)", "rgb(115,115,115)", "rgb(116,116,116)",
            "rgb(117,117,117)", "rgb(118,118,118)", "rgb(119,119,119)",
            "rgb(120,120,120)", "rgb(121,121,121)", "rgb(122,122,122)",
            "rgb(123,123,123)", "rgb(124,124,124)", "rgb(125,125,125)",
            "rgb(126,126,126)", "rgb(127,127,127)", "rgb(128,128,128)",
            "rgb(129,129,129)", "rgb(130,130,130)", "rgb(131,131,131)",
            "rgb(132,132,132)", "rgb(133,133,133)", "rgb(134,134,134)",
            "rgb(135,135,135)", "rgb(136,136,136)", "rgb(137,137,137)",
            "rgb(138,138,138)", "rgb(139,139,139)", "rgb(140,140,140)",
            "rgb(141,141,141)", "rgb(142,142,142)", "rgb(143,143,143)",
            "rgb(144,144,144)", "rgb(145,145,145)", "rgb(146,146,146)",
            "rgb(147,147,147)", "rgb(148,148,148)", "rgb(149,149,149)",
            "rgb(150,150,150)", "rgb(151,151,151)", "rgb(152,152,152)",
            "rgb(153,153,153)", "rgb(154,154,154)", "rgb(155,155,155)",
            "rgb(156,156,156)", "rgb(157,157,157)", "rgb(158,158,158)",
            "rgb(159,159,159)", "rgb(160,160,160)", "rgb(161,161,161)",
            "rgb(162,162,162)", "rgb(163,163,163)", "rgb(164,164,164)",
            "rgb(165,165,165)", "rgb(166,166,166)", "rgb(167,167,167)",
            "rgb(168,168,168)", "rgb(169,169,169)", "rgb(170,170,170)",
            "rgb(171,171,171)", "rgb(172,172,172)", "rgb(173,173,173)",
            "rgb(174,174,174)", "rgb(175,175,175)", "rgb(176,176,176)",
            "rgb(177,177,177)", "rgb(178,178,178)", "rgb(179,179,179)",
            "rgb(180,180,180)", "rgb(181,181,181)", "rgb(182,182,182)",
            "rgb(183,183,183)", "rgb(184,184,184)", "rgb(185,185,185)",
            "rgb(186,186,186)", "rgb(187,187,187)", "rgb(188,188,188)",
            "rgb(189,189,189)", "rgb(190,190,190)", "rgb(191,191,191)",
            "rgb(192,192,192)", "rgb(193,193,193)", "rgb(194,194,194)",
            "rgb(195,195,195)", "rgb(196,196,196)", "rgb(197,197,197)",
            "rgb(198,198,198)", "rgb(199,199,199)", "rgb(200,200,200)",
            "rgb(201,201,201)", "rgb(202,202,202)", "rgb(203,203,203)",
            "rgb(204,204,204)", "rgb(205,205,205)", "rgb(206,206,206)",
            "rgb(207,207,207)", "rgb(208,208,208)", "rgb(209,209,209)",
            "rgb(210,210,210)", "rgb(211,211,211)", "rgb(212,212,212)",
            "rgb(213,213,213)", "rgb(214,214,214)", "rgb(215,215,215)",
            "rgb(216,216,216)", "rgb(217,217,217)", "rgb(218,218,218)",
            "rgb(219,219,219)", "rgb(220,220,220)", "rgb(221,221,221)",
            "rgb(222,222,222)", "rgb(223,223,223)", "rgb(224,224,224)",
            "rgb(225,225,225)", "rgb(226,226,226)", "rgb(227,227,227)",
            "rgb(228,228,228)", "rgb(229,229,229)", "rgb(230,230,230)",
            "rgb(231,231,231)", "rgb(232,232,232)", "rgb(233,233,233)",
            "rgb(234,234,234)", "rgb(235,235,235)", "rgb(236,236,236)",
            "rgb(237,237,237)", "rgb(238,238,238)", "rgb(239,239,239)",
            "rgb(240,240,240)", "rgb(241,241,241)", "rgb(242,242,242)",
            "rgb(243,243,243)", "rgb(244,244,244)", "rgb(245,245,245)",
            "rgb(246,246,246)", "rgb(247,247,247)", "rgb(248,248,248)",
            "rgb(249,249,249)", "rgb(250,250,250)", "rgb(251,251,251)",
            "rgb(252,252,252)", "rgb(253,253,253)", "rgb(254,254,254)",
            "rgb(255,255,255)",
        });
        new ColorTable("inverse_gray_shade", "inverse_gray_shade",
                       new String[] {
            "rgb(255,255,255)", "rgb(255,255,255)", "rgb(254,254,254)",
            "rgb(253,253,253)", "rgb(252,252,252)", "rgb(251,251,251)",
            "rgb(250,250,250)", "rgb(249,249,249)", "rgb(248,248,248)",
            "rgb(247,247,247)", "rgb(246,246,246)", "rgb(245,245,245)",
            "rgb(244,244,244)", "rgb(243,243,243)", "rgb(242,242,242)",
            "rgb(241,241,241)", "rgb(240,240,240)", "rgb(239,239,239)",
            "rgb(238,238,238)", "rgb(237,237,237)", "rgb(236,236,236)",
            "rgb(235,235,235)", "rgb(234,234,234)", "rgb(233,233,233)",
            "rgb(232,232,232)", "rgb(231,231,231)", "rgb(230,230,230)",
            "rgb(229,229,229)", "rgb(228,228,228)", "rgb(227,227,227)",
            "rgb(226,226,226)", "rgb(225,225,225)", "rgb(224,224,224)",
            "rgb(223,223,223)", "rgb(222,222,222)", "rgb(221,221,221)",
            "rgb(220,220,220)", "rgb(219,219,219)", "rgb(218,218,218)",
            "rgb(217,217,217)", "rgb(216,216,216)", "rgb(215,215,215)",
            "rgb(214,214,214)", "rgb(213,213,213)", "rgb(212,212,212)",
            "rgb(211,211,211)", "rgb(210,210,210)", "rgb(209,209,209)",
            "rgb(208,208,208)", "rgb(207,207,207)", "rgb(206,206,206)",
            "rgb(205,205,205)", "rgb(204,204,204)", "rgb(203,203,203)",
            "rgb(202,202,202)", "rgb(201,201,201)", "rgb(200,200,200)",
            "rgb(199,199,199)", "rgb(198,198,198)", "rgb(197,197,197)",
            "rgb(196,196,196)", "rgb(195,195,195)", "rgb(194,194,194)",
            "rgb(193,193,193)", "rgb(192,192,192)", "rgb(191,191,191)",
            "rgb(190,190,190)", "rgb(189,189,189)", "rgb(188,188,188)",
            "rgb(187,187,187)", "rgb(186,186,186)", "rgb(185,185,185)",
            "rgb(184,184,184)", "rgb(183,183,183)", "rgb(182,182,182)",
            "rgb(181,181,181)", "rgb(180,180,180)", "rgb(179,179,179)",
            "rgb(178,178,178)", "rgb(177,177,177)", "rgb(176,176,176)",
            "rgb(175,175,175)", "rgb(174,174,174)", "rgb(173,173,173)",
            "rgb(172,172,172)", "rgb(171,171,171)", "rgb(170,170,170)",
            "rgb(169,169,169)", "rgb(168,168,168)", "rgb(167,167,167)",
            "rgb(166,166,166)", "rgb(165,165,165)", "rgb(164,164,164)",
            "rgb(163,163,163)", "rgb(162,162,162)", "rgb(161,161,161)",
            "rgb(160,160,160)", "rgb(159,159,159)", "rgb(158,158,158)",
            "rgb(157,157,157)", "rgb(156,156,156)", "rgb(155,155,155)",
            "rgb(154,154,154)", "rgb(153,153,153)", "rgb(152,152,152)",
            "rgb(151,151,151)", "rgb(150,150,150)", "rgb(149,149,149)",
            "rgb(148,148,148)", "rgb(147,147,147)", "rgb(146,146,146)",
            "rgb(145,145,145)", "rgb(144,144,144)", "rgb(143,143,143)",
            "rgb(142,142,142)", "rgb(141,141,141)", "rgb(140,140,140)",
            "rgb(139,139,139)", "rgb(138,138,138)", "rgb(137,137,137)",
            "rgb(136,136,136)", "rgb(135,135,135)", "rgb(134,134,134)",
            "rgb(133,133,133)", "rgb(132,132,132)", "rgb(131,131,131)",
            "rgb(130,130,130)", "rgb(129,129,129)", "rgb(128,128,128)",
            "rgb(127,127,127)", "rgb(126,126,126)", "rgb(125,125,125)",
            "rgb(124,124,124)", "rgb(123,123,123)", "rgb(122,122,122)",
            "rgb(121,121,121)", "rgb(120,120,120)", "rgb(119,119,119)",
            "rgb(118,118,118)", "rgb(117,117,117)", "rgb(116,116,116)",
            "rgb(115,115,115)", "rgb(114,114,114)", "rgb(113,113,113)",
            "rgb(112,112,112)", "rgb(111,111,111)", "rgb(110,110,110)",
            "rgb(109,109,109)", "rgb(108,108,108)", "rgb(107,107,107)",
            "rgb(106,106,106)", "rgb(105,105,105)", "rgb(104,104,104)",
            "rgb(103,103,103)", "rgb(102,102,102)", "rgb(101,101,101)",
            "rgb(100,100,100)", "rgb(99,99,99)", "rgb(98,98,98)",
            "rgb(97,97,97)", "rgb(96,96,96)", "rgb(95,95,95)",
            "rgb(94,94,94)", "rgb(93,93,93)", "rgb(92,92,92)",
            "rgb(91,91,91)", "rgb(90,90,90)", "rgb(89,89,89)",
            "rgb(88,88,88)", "rgb(87,87,87)", "rgb(86,86,86)",
            "rgb(85,85,85)", "rgb(84,84,84)", "rgb(83,83,83)",
            "rgb(82,82,82)", "rgb(81,81,81)", "rgb(80,80,80)",
            "rgb(79,79,79)", "rgb(78,78,78)", "rgb(77,77,77)",
            "rgb(76,76,76)", "rgb(75,75,75)", "rgb(74,74,74)",
            "rgb(73,73,73)", "rgb(72,72,72)", "rgb(71,71,71)",
            "rgb(70,70,70)", "rgb(69,69,69)", "rgb(68,68,68)",
            "rgb(67,67,67)", "rgb(66,66,66)", "rgb(65,65,65)",
            "rgb(64,64,64)", "rgb(63,63,63)", "rgb(62,62,62)",
            "rgb(61,61,61)", "rgb(60,60,60)", "rgb(59,59,59)",
            "rgb(58,58,58)", "rgb(57,57,57)", "rgb(56,56,56)",
            "rgb(55,55,55)", "rgb(54,54,54)", "rgb(53,53,53)",
            "rgb(52,52,52)", "rgb(51,51,51)", "rgb(50,50,50)",
            "rgb(49,49,49)", "rgb(48,48,48)", "rgb(47,47,47)",
            "rgb(46,46,46)", "rgb(45,45,45)", "rgb(44,44,44)",
            "rgb(43,43,43)", "rgb(42,42,42)", "rgb(41,41,41)",
            "rgb(40,40,40)", "rgb(39,39,39)", "rgb(38,38,38)",
            "rgb(37,37,37)", "rgb(36,36,36)", "rgb(35,35,35)",
            "rgb(34,34,34)", "rgb(33,33,33)", "rgb(32,32,32)",
            "rgb(31,31,31)", "rgb(30,30,30)", "rgb(29,29,29)",
            "rgb(28,28,28)", "rgb(27,27,27)", "rgb(26,26,26)",
            "rgb(25,25,25)", "rgb(24,24,24)", "rgb(23,23,23)",
            "rgb(22,22,22)", "rgb(21,21,21)", "rgb(20,20,20)",
            "rgb(19,19,19)", "rgb(18,18,18)", "rgb(17,17,17)",
            "rgb(16,16,16)", "rgb(15,15,15)", "rgb(14,14,14)",
            "rgb(13,13,13)", "rgb(12,12,12)", "rgb(11,11,11)",
            "rgb(10,10,10)", "rgb(9,9,9)", "rgb(8,8,8)", "rgb(7,7,7)",
            "rgb(6,6,6)", "rgb(5,5,5)", "rgb(4,4,4)", "rgb(3,3,3)",
            "rgb(2,2,2)", "rgb(1,1,1)",
        });
        new ColorTable("light_gray_scale", "light_gray_scale", new String[] {
            "rgb(62,62,62)", "rgb(69,69,69)", "rgb(75,75,75)",
            "rgb(82,82,82)", "rgb(88,88,88)", "rgb(95,95,95)",
            "rgb(102,102,102)", "rgb(108,108,108)", "rgb(115,115,115)",
            "rgb(121,121,121)", "rgb(128,128,128)", "rgb(135,135,135)",
            "rgb(141,141,141)", "rgb(148,148,148)", "rgb(155,155,155)",
            "rgb(161,161,161)", "rgb(168,168,168)", "rgb(174,174,174)",
            "rgb(181,181,181)", "rgb(188,188,188)", "rgb(194,194,194)",
            "rgb(201,201,201)", "rgb(207,207,207)", "rgb(214,214,214)",
            "rgb(221,221,221)", "rgb(227,227,227)", "rgb(234,234,234)",
            "rgb(240,240,240)", "rgb(247,247,247)", "rgb(254,254,254)",
        });
        new ColorTable("blue_green", "blue_green", new String[] {
            "#f7fcfd", "#e5f5f9", "#ccece6", "#99d8c9", "#66c2a4", "#41ae76",
            "#238b45", "#006d2c", "#00441b",
        });
        new ColorTable("blue_purple", "blue_purple", new String[] {
            "#f7fcfd", "#e0ecf4", "#bfd3e6", "#9ebcda", "#8c96c6", "#8c6bb1",
            "#88419d", "#810f7c", "#4d004b",
        });
        new ColorTable("green_blue", "green_blue", new String[] {
            "#f7fcf0", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3",
            "#2b8cbe", "#0868ac", "#084081",
        });
        new ColorTable("orange_red", "orange_red", new String[] {
            "#fff7ec", "#fee8c8", "#fdd49e", "#fdbb84", "#fc8d59", "#ef6548",
            "#d7301f", "#b30000", "#7f0000",
        });
        new ColorTable("purple_blue", "purple_blue", new String[] {
            "#fff7fb", "#ece7f2", "#d0d1e6", "#a6bddb", "#74a9cf", "#3690c0",
            "#0570b0", "#045a8d", "#023858",
        });
        new ColorTable("purple_blue_green", "purple_blue_green",
                       new String[] {
            "#fff7fb", "#ece2f0", "#d0d1e6", "#a6bddb", "#67a9cf", "#3690c0",
            "#02818a", "#016c59", "#014636",
        });
        new ColorTable("purple_red", "purple_red", new String[] {
            "#f7f4f9", "#e7e1ef", "#d4b9da", "#c994c7", "#df65b0", "#e7298a",
            "#ce1256", "#980043", "#67001f",
        });
        new ColorTable("red_purple", "red_purple", new String[] {
            "#fff7f3", "#fde0dd", "#fcc5c0", "#fa9fb5", "#f768a1", "#dd3497",
            "#ae017e", "#7a0177", "#49006a",
        });
        new ColorTable("yellow_green", "yellow_green", new String[] {
            "#ffffe5", "#f7fcb9", "#d9f0a3", "#addd8e", "#78c679", "#41ab5d",
            "#238443", "#006837", "#004529",
        });
        new ColorTable("yellow_green_blue", "yellow_green_blue",
                       new String[] {
            "#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0",
            "#225ea8", "#253494", "#081d58",
        });
        new ColorTable("yellow_orange_brown", "yellow_orange_brown",
                       new String[] {
            "#ffffe5", "#fff7bc", "#fee391", "#fec44f", "#fe9929", "#ec7014",
            "#cc4c02", "#993404", "#662506",
        });
        new ColorTable("yellow_orange_red", "yellow_orange_red",
                       new String[] {
            "#ffffcc", "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a",
            "#e31a1c", "#bd0026", "#800026",
        });
        new ColorTable("oranges", "oranges", new String[] {
            "#fff5eb", "#fee6ce", "#fdd0a2", "#fdae6b", "#fd8d3c", "#f16913",
            "#d94801", "#a63603", "#7f2704",
        });
        new ColorTable("purples", "purples", new String[] {
            "#fcfbfd", "#efedf5", "#dadaeb", "#bcbddc", "#9e9ac8", "#807dba",
            "#6a51a3", "#54278f", "#3f007d",
        });
        new ColorTable("reds", "reds", new String[] {
            "#fff5f0", "#fee0d2", "#fcbba1", "#fc9272", "#fb6a4a", "#ef3b2c",
            "#cb181d", "#a50f15", "#67000d",
        });
        new ColorTable("greens", "greens", new String[] {
            "#f7fcf5", "#e5f5e0", "#c7e9c0", "#a1d99b", "#74c476", "#41ab5d",
            "#238b45", "#006d2c", "#00441b",
        });
        new ColorTable("map_grays", "map_grays", new String[] {
            "#ffffff", "#f0f0f0", "#d9d9d9", "#bdbdbd", "#969696", "#737373",
            "#525252", "#252525", "#000000",
        });
        new ColorTable("bright38", "bright38", new String[] {
            "rgb(254,0,225)", "rgb(188,0,254)", "rgb(165,0,254)",
            "rgb(134,0,254)", "rgb(111,0,254)", "rgb(81,0,254)",
            "rgb(58,0,254)", "rgb(28,0,254)", "rgb(0,2,254)", "rgb(0,33,254)",
            "rgb(0,56,254)", "rgb(0,78,254)", "rgb(0,139,254)",
            "rgb(0,169,254)", "rgb(0,208,254)", "rgb(0,231,254)",
            "rgb(0,254,231)", "rgb(0,254,200)", "rgb(0,254,169)",
            "rgb(0,254,139)", "rgb(0,254,109)", "rgb(0,254,79)",
            "rgb(0,254,39)", "rgb(0,254,0)", "rgb(42,254,0)", "rgb(88,254,0)",
            "rgb(126,254,0)", "rgb(164,254,0)", "rgb(195,254,0)",
            "rgb(226,254,0)", "rgb(254,243,0)", "rgb(254,199,0)",
            "rgb(254,167,0)", "rgb(254,137,0)", "rgb(254,106,0)",
            "rgb(254,68,0)", "rgb(254,30,0)", "rgb(254,0,0)",
        });
        new ColorTable("precipitation", "precipitation", new String[] {
            "rgb(255,255,255)", "rgb(6,13,255)", "rgb(13,26,255)",
            "rgb(20,40,255)", "rgb(26,53,255)", "rgb(33,67,255)",
            "rgb(40,80,255)", "rgb(46,93,255)", "rgb(53,107,255)",
            "rgb(60,120,255)", "rgb(67,134,255)", "rgb(73,147,255)",
            "rgb(80,161,255)", "rgb(87,174,255)", "rgb(93,187,255)",
            "rgb(100,201,255)", "rgb(107,214,255)", "rgb(114,228,255)",
            "rgb(120,241,255)", "rgb(127,255,255)", "rgb(127,255,229)",
            "rgb(129,253,223)", "rgb(130,251,216)", "rgb(132,249,210)",
            "rgb(133,247,203)", "rgb(135,245,197)", "rgb(137,243,190)",
            "rgb(138,241,184)", "rgb(140,239,177)", "rgb(142,237,171)",
            "rgb(143,235,164)", "rgb(145,233,158)", "rgb(146,231,152)",
            "rgb(148,229,145)", "rgb(150,227,139)", "rgb(151,225,132)",
            "rgb(153,224,126)", "rgb(154,222,119)", "rgb(156,220,113)",
            "rgb(158,218,106)", "rgb(159,216,100)", "rgb(161,214,93)",
            "rgb(163,212,87)", "rgb(164,210,81)", "rgb(166,208,74)",
            "rgb(167,206,68)", "rgb(169,204,61)", "rgb(171,202,55)",
            "rgb(172,200,48)", "rgb(174,198,42)", "rgb(175,196,35)",
            "rgb(177,194,29)", "rgb(179,193,22)", "rgb(180,191,16)",
            "rgb(182,189,10)", "rgb(183,187,3)", "rgb(185,185,0)",
            "rgb(187,183,0)", "rgb(188,181,0)", "rgb(190,179,0)",
            "rgb(192,177,0)", "rgb(193,175,0)", "rgb(195,173,0)",
            "rgb(196,171,0)", "rgb(198,169,0)", "rgb(200,167,0)",
            "rgb(201,165,0)", "rgb(203,163,0)", "rgb(204,162,0)",
            "rgb(206,160,0)", "rgb(208,158,0)", "rgb(209,156,0)",
            "rgb(211,154,0)", "rgb(213,152,0)", "rgb(214,150,0)",
            "rgb(216,148,0)", "rgb(217,146,0)", "rgb(219,144,0)",
            "rgb(221,142,0)", "rgb(222,140,0)", "rgb(224,138,0)",
            "rgb(225,136,0)", "rgb(227,134,0)", "rgb(229,132,0)",
            "rgb(230,131,0)", "rgb(232,129,0)", "rgb(234,127,0)",
            "rgb(235,125,0)", "rgb(237,123,0)", "rgb(238,121,0)",
            "rgb(240,119,0)", "rgb(242,117,0)", "rgb(243,115,0)",
            "rgb(245,113,0)", "rgb(246,111,0)", "rgb(248,109,0)",
            "rgb(250,107,0)", "rgb(251,105,0)", "rgb(253,103,0)",
            "rgb(255,101,0)",
        });
        new ColorTable("humidity", "humidity", new String[] {
            "rgb(255,255,0)", "rgb(228,255,0)", "rgb(201,255,0)",
            "rgb(174,255,0)", "rgb(147,255,0)", "rgb(120,255,0)",
            "rgb(93,255,0)", "rgb(67,255,0)", "rgb(40,255,0)",
            "rgb(13,255,0)", "rgb(0,248,13)", "rgb(0,234,40)",
            "rgb(0,221,67)", "rgb(0,208,93)", "rgb(0,194,120)",
            "rgb(0,181,147)", "rgb(0,167,174)", "rgb(0,154,201)",
            "rgb(0,140,228)", "rgb(0,127,255)",
        });
        new ColorTable("temperature", "temperature", new String[] {
            "rgb(0,0,250)", "rgb(0,2,250)", "rgb(0,5,250)", "rgb(0,8,250)",
            "rgb(0,11,250)", "rgb(0,14,250)", "rgb(0,16,250)",
            "rgb(0,19,250)", "rgb(0,22,250)", "rgb(0,25,250)",
            "rgb(0,28,250)", "rgb(0,30,250)", "rgb(0,33,250)",
            "rgb(0,36,250)", "rgb(0,39,250)", "rgb(0,42,250)",
            "rgb(0,44,250)", "rgb(0,47,250)", "rgb(0,50,250)",
            "rgb(0,53,250)", "rgb(0,56,250)", "rgb(0,58,250)",
            "rgb(0,61,250)", "rgb(0,64,250)", "rgb(0,67,250)",
            "rgb(0,70,250)", "rgb(0,73,250)", "rgb(0,75,250)",
            "rgb(0,78,250)", "rgb(0,81,250)", "rgb(0,84,250)",
            "rgb(0,87,250)", "rgb(0,89,250)", "rgb(0,92,250)",
            "rgb(0,95,250)", "rgb(0,98,250)", "rgb(0,101,250)",
            "rgb(0,103,250)", "rgb(0,106,250)", "rgb(0,109,250)",
            "rgb(0,112,250)", "rgb(0,115,250)", "rgb(0,117,250)",
            "rgb(0,120,250)", "rgb(0,123,250)", "rgb(0,126,250)",
            "rgb(0,129,250)", "rgb(0,132,250)", "rgb(0,134,250)",
            "rgb(0,137,250)", "rgb(0,140,250)", "rgb(0,143,250)",
            "rgb(0,146,250)", "rgb(0,148,250)", "rgb(0,151,250)",
            "rgb(0,154,250)", "rgb(0,157,250)", "rgb(0,160,250)",
            "rgb(0,162,250)", "rgb(0,165,250)", "rgb(0,168,250)",
            "rgb(0,171,250)", "rgb(0,174,250)", "rgb(0,176,250)",
            "rgb(0,179,250)", "rgb(0,182,250)", "rgb(0,185,250)",
            "rgb(0,188,250)", "rgb(0,191,250)", "rgb(0,193,250)",
            "rgb(0,196,250)", "rgb(0,199,250)", "rgb(0,202,250)",
            "rgb(0,205,250)", "rgb(0,207,250)", "rgb(0,210,250)",
            "rgb(0,213,250)", "rgb(0,216,250)", "rgb(0,219,250)",
            "rgb(0,221,250)", "rgb(0,224,250)", "rgb(0,227,250)",
            "rgb(0,230,250)", "rgb(0,233,250)", "rgb(0,235,250)",
            "rgb(0,238,250)", "rgb(0,241,250)", "rgb(0,244,250)",
            "rgb(0,247,250)", "rgb(0,255,255)", "rgb(0,255,203)",
            "rgb(0,255,152)", "rgb(0,255,101)", "rgb(0,255,50)",
            "rgb(0,255,0)", "rgb(22,255,0)", "rgb(45,255,0)", "rgb(68,255,0)",
            "rgb(91,255,0)", "rgb(113,255,0)", "rgb(136,255,0)",
            "rgb(159,255,0)", "rgb(182,255,0)", "rgb(205,255,0)",
            "rgb(255,255,0)", "rgb(255,247,0)", "rgb(255,240,0)",
            "rgb(255,232,0)", "rgb(255,225,0)", "rgb(255,217,0)",
            "rgb(255,210,0)", "rgb(255,202,0)", "rgb(255,195,0)",
            "rgb(255,187,0)", "rgb(255,180,0)", "rgb(255,172,0)",
            "rgb(255,165,0)", "rgb(255,157,0)", "rgb(255,150,0)",
            "rgb(255,142,0)", "rgb(255,135,0)", "rgb(255,127,0)",
            "rgb(255,120,0)", "rgb(255,112,0)", "rgb(255,105,0)",
            "rgb(255,97,0)", "rgb(255,90,0)", "rgb(255,82,0)",
            "rgb(255,75,0)", "rgb(255,67,0)", "rgb(255,60,0)",
            "rgb(255,52,0)", "rgb(255,45,0)", "rgb(255,37,0)",
            "rgb(255,30,0)",
        });
        new ColorTable("visad", "visad", new String[] {
            "rgb(0,0,255)", "rgb(8,17,246)", "rgb(17,35,237)",
            "rgb(26,52,228)", "rgb(35,70,219)", "rgb(43,87,211)",
            "rgb(52,105,202)", "rgb(61,123,193)", "rgb(70,140,184)",
            "rgb(79,158,175)", "rgb(87,175,167)", "rgb(96,193,158)",
            "rgb(105,211,149)", "rgb(114,228,140)", "rgb(123,246,131)",
            "rgb(131,246,123)", "rgb(140,228,114)", "rgb(149,211,105)",
            "rgb(158,193,96)", "rgb(167,175,87)", "rgb(175,158,79)",
            "rgb(184,140,70)", "rgb(193,123,61)", "rgb(202,105,52)",
            "rgb(211,87,43)", "rgb(219,70,35)", "rgb(228,52,26)",
            "rgb(237,35,17)", "rgb(246,17,8)", "rgb(255,0,0)",
        });
        new ColorTable("inverse_visad", "inverse_visad", new String[] {
            "rgb(255,0,0)", "rgb(246,17,8)", "rgb(237,35,17)",
            "rgb(228,52,26)", "rgb(219,70,35)", "rgb(211,87,43)",
            "rgb(202,105,52)", "rgb(193,123,61)", "rgb(184,140,70)",
            "rgb(175,158,79)", "rgb(167,175,87)", "rgb(158,193,96)",
            "rgb(149,211,105)", "rgb(140,228,114)", "rgb(131,246,123)",
            "rgb(123,246,131)", "rgb(114,228,140)", "rgb(105,211,149)",
            "rgb(96,193,158)", "rgb(87,175,167)", "rgb(79,158,175)",
            "rgb(70,140,184)", "rgb(61,123,193)", "rgb(52,105,202)",
            "rgb(43,87,211)", "rgb(35,70,219)", "rgb(26,52,228)",
            "rgb(17,35,237)", "rgb(8,17,246)", "rgb(0,0,255)",
        });
        new ColorTable("wind_comps", "wind_comps", new String[] {
            "rgb(0,0,179)", "rgb(10,24,187)", "rgb(20,48,194)",
            "rgb(31,73,202)", "rgb(41,97,210)", "rgb(52,122,218)",
            "rgb(62,146,226)", "rgb(73,170,234)", "rgb(83,195,242)",
            "rgb(94,219,249)", "rgb(64,207,243)", "rgb(64,212,222)",
            "rgb(64,218,201)", "rgb(64,223,180)", "rgb(64,228,159)",
            "rgb(64,233,138)", "rgb(64,238,117)", "rgb(64,243,96)",
            "rgb(64,248,75)", "rgb(64,254,54)",
        });
        new ColorTable("windspeed", "windspeed", new String[] {
            "rgb(0,0,250)", "rgb(0,12,250)", "rgb(0,25,250)", "rgb(0,37,250)",
            "rgb(0,50,250)", "rgb(0,62,250)", "rgb(0,75,250)",
            "rgb(0,87,250)", "rgb(0,100,250)", "rgb(0,112,250)",
            "rgb(0,125,250)", "rgb(0,137,250)", "rgb(0,150,250)",
            "rgb(0,162,250)", "rgb(0,175,250)", "rgb(0,187,250)",
            "rgb(0,200,250)", "rgb(0,212,250)", "rgb(0,225,250)",
            "rgb(0,237,250)", "rgb(0,255,255)", "rgb(0,255,234)",
            "rgb(0,255,214)", "rgb(0,255,193)", "rgb(0,255,173)",
            "rgb(0,255,152)", "rgb(0,255,132)", "rgb(0,255,111)",
            "rgb(0,255,91)", "rgb(0,255,70)", "rgb(0,255,0)", "rgb(20,255,0)",
            "rgb(41,255,0)", "rgb(61,255,0)", "rgb(82,255,0)",
            "rgb(102,255,0)", "rgb(123,255,0)", "rgb(143,255,0)",
            "rgb(164,255,0)", "rgb(184,255,0)", "rgb(255,255,0)",
            "rgb(255,247,0)", "rgb(255,240,0)", "rgb(255,232,0)",
            "rgb(255,225,0)", "rgb(255,217,0)", "rgb(255,210,0)",
            "rgb(255,202,0)", "rgb(255,195,0)", "rgb(255,187,0)",
            "rgb(255,180,0)", "rgb(255,172,0)", "rgb(255,165,0)",
            "rgb(255,157,0)", "rgb(255,150,0)", "rgb(255,142,0)",
            "rgb(255,135,0)", "rgb(255,127,0)", "rgb(255,120,0)",
            "rgb(255,112,0)", "rgb(255,105,0)", "rgb(255,97,0)",
            "rgb(255,90,0)", "rgb(255,82,0)", "rgb(255,75,0)",
            "rgb(255,67,0)", "rgb(255,60,0)", "rgb(255,52,0)",
            "rgb(255,45,0)", "rgb(255,37,0)",
        });
        new ColorTable("dbz", "dbz", new String[] {
            "rgb(1,57,255)", "rgb(0,140,255)", "rgb(1,209,255)",
            "rgb(1,255,232)", "rgb(1,255,171)", "rgb(1,255,79)",
            "rgb(43,255,0)", "rgb(166,255,2)", "rgb(227,255,1)",
            "rgb(255,198,0)", "rgb(255,168,1)", "rgb(255,145,1)",
            "rgb(255,130,1)", "rgb(255,107,0)", "rgb(255,84,0)",
            "rgb(255,7,0)",
        });
        new ColorTable("dbz_nws", "dbz_nws", new String[] {
            "rgb(0,0,0)", "rgb(0,255,255)", "rgb(135,206,235)",
            "rgb(0,0,255)", "rgb(0,255,0)", "rgb(50,205,50)",
            "rgb(34,139,34)", "rgb(238,238,0)", "rgb(238,220,130)",
            "rgb(238,118,33)", "rgb(255,48,48)", "rgb(176,48,96)",
            "rgb(176,48,96)", "rgb(186,85,211)", "rgb(255,0,255)",
            "rgb(255,255,255)",
        });
        new ColorTable("topographic", "topographic", new String[] {
            "rgb(25,25,255)", "rgb(20,170,42)", "rgb(20,170,42)",
            "rgb(27,174,35)", "rgb(35,179,28)", "rgb(43,184,22)",
            "rgb(51,188,15)", "rgb(59,193,9)", "rgb(67,198,2)",
            "rgb(70,200,0)", "rgb(71,199,0)", "rgb(72,199,1)",
            "rgb(73,198,1)", "rgb(74,198,2)", "rgb(75,197,2)",
            "rgb(76,197,3)", "rgb(78,197,3)", "rgb(79,196,4)",
            "rgb(80,196,4)", "rgb(81,195,5)", "rgb(82,195,5)",
            "rgb(83,194,6)", "rgb(85,194,6)", "rgb(86,194,7)",
            "rgb(87,193,7)", "rgb(88,193,8)", "rgb(89,192,8)",
            "rgb(90,192,9)", "rgb(92,191,9)", "rgb(93,191,10)",
            "rgb(94,191,10)", "rgb(95,190,11)", "rgb(96,190,11)",
            "rgb(97,189,12)", "rgb(98,189,12)", "rgb(100,188,13)",
            "rgb(101,188,13)", "rgb(102,188,14)", "rgb(103,187,14)",
            "rgb(104,187,15)", "rgb(105,186,15)", "rgb(107,186,16)",
            "rgb(108,185,16)", "rgb(109,185,17)", "rgb(110,185,17)",
            "rgb(111,184,18)", "rgb(112,184,18)", "rgb(114,183,19)",
            "rgb(115,183,19)", "rgb(116,182,20)", "rgb(117,182,21)",
            "rgb(118,182,21)", "rgb(119,181,22)", "rgb(120,181,22)",
            "rgb(122,180,23)", "rgb(123,180,23)", "rgb(124,179,24)",
            "rgb(125,179,24)", "rgb(126,179,25)", "rgb(127,178,25)",
            "rgb(129,178,26)", "rgb(130,177,26)", "rgb(131,177,27)",
            "rgb(132,176,27)", "rgb(133,176,28)", "rgb(134,176,28)",
            "rgb(136,175,29)", "rgb(137,175,29)", "rgb(138,174,30)",
            "rgb(139,174,30)", "rgb(140,173,31)", "rgb(141,173,31)",
            "rgb(143,173,32)", "rgb(144,172,32)", "rgb(145,172,33)",
            "rgb(146,171,33)", "rgb(147,171,34)", "rgb(148,170,34)",
            "rgb(149,170,35)", "rgb(151,170,35)", "rgb(152,169,36)",
            "rgb(153,169,36)", "rgb(154,168,37)", "rgb(155,168,37)",
            "rgb(156,167,38)", "rgb(158,167,38)", "rgb(159,167,39)",
            "rgb(160,166,39)", "rgb(161,166,40)", "rgb(162,165,40)",
            "rgb(163,165,41)", "rgb(165,165,42)", "rgb(165,165,42)",
            "rgb(165,165,43)", "rgb(165,165,44)", "rgb(165,165,45)",
            "rgb(166,166,46)", "rgb(166,166,47)", "rgb(166,166,48)",
            "rgb(166,166,49)", "rgb(166,166,50)", "rgb(167,167,51)",
            "rgb(167,167,52)", "rgb(167,167,53)", "rgb(167,167,54)",
            "rgb(167,167,55)", "rgb(168,168,56)", "rgb(168,168,57)",
            "rgb(168,168,58)", "rgb(168,168,59)", "rgb(169,169,60)",
            "rgb(169,169,61)", "rgb(169,169,62)", "rgb(169,169,63)",
            "rgb(169,169,64)", "rgb(170,170,65)", "rgb(170,170,66)",
            "rgb(170,170,67)", "rgb(170,170,68)", "rgb(170,170,68)",
            "rgb(171,171,69)", "rgb(171,171,70)", "rgb(171,171,71)",
            "rgb(171,171,72)", "rgb(172,172,73)", "rgb(172,172,74)",
            "rgb(172,172,75)", "rgb(172,172,76)", "rgb(172,172,77)",
            "rgb(173,173,78)", "rgb(173,173,79)", "rgb(173,173,80)",
            "rgb(173,173,81)", "rgb(173,173,82)", "rgb(174,174,83)",
            "rgb(174,174,84)", "rgb(174,174,85)", "rgb(174,174,86)",
            "rgb(175,175,87)", "rgb(175,175,88)", "rgb(175,175,89)",
            "rgb(175,175,90)", "rgb(175,175,91)", "rgb(176,176,92)",
            "rgb(176,176,93)", "rgb(176,176,94)", "rgb(176,176,95)",
            "rgb(176,176,95)", "rgb(177,177,96)", "rgb(177,177,97)",
            "rgb(177,177,98)", "rgb(177,177,99)", "rgb(178,178,100)",
            "rgb(178,178,101)", "rgb(178,178,102)", "rgb(178,178,103)",
            "rgb(178,178,104)", "rgb(179,179,105)", "rgb(179,179,106)",
            "rgb(179,179,107)", "rgb(179,179,108)", "rgb(179,179,109)",
            "rgb(180,180,110)", "rgb(180,180,111)", "rgb(180,180,112)",
            "rgb(180,180,113)", "rgb(181,181,114)", "rgb(181,181,115)",
            "rgb(181,181,116)", "rgb(181,181,117)", "rgb(181,181,118)",
            "rgb(182,182,119)", "rgb(182,182,120)", "rgb(182,182,121)",
            "rgb(182,182,121)", "rgb(182,182,122)", "rgb(183,183,123)",
            "rgb(183,183,124)", "rgb(183,183,125)", "rgb(183,183,126)",
            "rgb(184,184,127)", "rgb(184,184,128)", "rgb(184,184,129)",
            "rgb(184,184,130)", "rgb(184,184,131)", "rgb(185,185,132)",
            "rgb(185,185,133)", "rgb(185,185,134)", "rgb(185,185,135)",
            "rgb(185,185,136)", "rgb(186,186,137)", "rgb(186,186,138)",
            "rgb(186,186,139)", "rgb(186,186,140)", "rgb(186,186,141)",
            "rgb(187,187,142)", "rgb(187,187,143)", "rgb(187,187,144)",
            "rgb(187,187,145)", "rgb(188,188,146)", "rgb(188,188,147)",
            "rgb(188,188,148)", "rgb(188,188,148)", "rgb(188,188,149)",
            "rgb(189,189,150)", "rgb(189,189,151)", "rgb(189,189,152)",
            "rgb(189,189,153)", "rgb(189,189,154)", "rgb(190,190,155)",
            "rgb(190,190,156)", "rgb(190,190,157)", "rgb(190,190,158)",
            "rgb(191,191,159)", "rgb(191,191,160)", "rgb(191,191,161)",
            "rgb(191,191,162)", "rgb(191,191,163)", "rgb(192,192,164)",
            "rgb(192,192,165)", "rgb(192,192,166)", "rgb(192,192,167)",
            "rgb(192,192,168)", "rgb(193,193,169)", "rgb(193,193,170)",
            "rgb(193,193,171)", "rgb(193,193,172)", "rgb(194,194,173)",
            "rgb(194,194,174)", "rgb(194,194,175)", "rgb(194,194,175)",
            "rgb(194,194,176)", "rgb(195,195,177)", "rgb(195,195,178)",
            "rgb(195,195,179)", "rgb(195,195,180)", "rgb(195,195,181)",
            "rgb(196,196,182)", "rgb(196,196,183)", "rgb(196,196,184)",
            "rgb(196,196,185)", "rgb(197,197,186)", "rgb(197,197,187)",
            "rgb(197,197,188)", "rgb(197,197,189)", "rgb(197,197,190)",
            "rgb(198,198,191)", "rgb(198,198,192)", "rgb(198,198,193)",
            "rgb(198,198,194)", "rgb(198,198,195)", "rgb(199,199,196)",
            "rgb(199,199,197)", "rgb(199,199,198)", "rgb(199,199,199)",
            "rgb(255,255,255)",
        });

    }


    /**
     * get the fixed set of color table names"
     *
     * @return color table names
     */
    public static List getColorTableNames() {
        makeTables();
        List l = new ArrayList();
        for (ColorTable ct : tables) {
            l.add(new TwoFacedObject(ct.getName(), ct.getId()));
        }

        return l;
    }

    /**
     * look up the color table from its name
     *
     * @param name table name
     *
     * @return table
     */
    public static ColorTable getColorTable(String name) {
        makeTables();
        for (ColorTable c : tables) {
            if (name.equals(c.getId())) {
                return c;
            }
        }

        return tables.get(0);
    }

    /**
     * _more_
     *
     * @param name _more_
     * @param min _more_
     * @param max _more_
     *
     * @return _more_
     */
    public static double[] getRange(String name, double min, double max) {
        if (name.equals("LASCLASSIFICATION")) {
            return new double[] { 0, 31 };
        }

        return new double[] { min, max };
    }





}

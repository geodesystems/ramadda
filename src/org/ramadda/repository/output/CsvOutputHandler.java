/**
Copyright (c) 2008-2023 Geode Systems LLC
SPDX-License-Identifier: Apache-2.0
*/

package org.ramadda.repository.output;


import org.ramadda.repository.*;
import org.ramadda.repository.auth.*;
import org.ramadda.repository.type.*;
import org.ramadda.util.seesv.Seesv;
import org.ramadda.util.HtmlUtils;
import org.ramadda.util.IO;
import org.ramadda.util.Utils;
import org.ramadda.util.sql.Clause;


import org.ramadda.util.sql.SqlUtil;


import org.w3c.dom.*;

import ucar.unidata.util.DateUtil;
import ucar.unidata.util.Misc;


import ucar.unidata.util.StringUtil;
import ucar.unidata.xml.XmlUtil;


import java.io.*;

import java.io.File;

import java.net.*;

import java.sql.ResultSet;
import java.sql.Statement;




import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;



import java.util.regex.*;

import java.util.zip.*;


/**
 *
 *
 *
 * @author RAMADDA Development Team
 * @version $Revision: 1.3 $
 */
public class CsvOutputHandler extends OutputHandler {


    /** _more_ */
    public static final OutputType OUTPUT_CSV = new OutputType("CSV Listing",
                                                    "default.csv",
                                                    OutputType.TYPE_FEEDS|
							       OutputType.TYPE_FORSEARCH,
                                                    "", ICON_CSV);
    public static final OutputType OUTPUT_IDS = new OutputType("IDS",
                                                    "default.ids",
							       OutputType.TYPE_FORSEARCH,
							       "", ICON_CSV);    


    /** _more_ */
    public static final OutputType OUTPUT_ENTRYCSV =
        new OutputType("Entry CSV", "entry.csv", OutputType.TYPE_FEEDS, "",
                       ICON_CSV);


    /**
     * _more_
     *
     * @param repository _more_
     * @param element _more_
     * @throws Exception _more_
     */
    public CsvOutputHandler(Repository repository, Element element)
            throws Exception {
        super(repository, element);
        addType(OUTPUT_CSV);
        addType(OUTPUT_IDS);
        addType(OUTPUT_ENTRYCSV);
    }



    /**
     * _more_
     *
     * @param request _more_
     * @param state _more_
     * @param links _more_
     *
     * @throws Exception _more_
     */
    public void getEntryLinks(Request request, State state, List<Link> links)
            throws Exception {
        if (state.getEntry() != null) {
            links.add(makeLink(request, state.getEntry(), OUTPUT_CSV));
            links.add(makeLink(request, state.getEntry(), OUTPUT_ENTRYCSV));
        }
    }


    /** _more_ */
    public static final String ARG_FIELDS = "fields";

    /** _more_ */
    public static final String ARG_DELIMITER = "delimiter";

    /** _more_ */
    public static final String ARG_FIXEDWIDTH = "fixedwidth";

    /** _more_ */
    public static final String ARG_FULLHEADER = "fullheader";



    private Result makeStream(Request request, InputStream is) throws Exception {
	return request.returnStream("entries.csv",  getMimeType(OUTPUT_CSV),is);	    
    }

    public Result listIds(Request request, List<Entry> entries) throws Exception {
	String what = request.getString("what","ids");
	StringBuilder sb = new StringBuilder();
	String mime = "text/csv";
	if(what.equals("ids")) {
	    request.setReturnFilename("ids.csv");
	    sb.append("id\n");

	} else 	if(what.equals("wget")) {
	    sb.append("#This was generated by RAMADDA to download the given entry files\n");
	    sb.append("WGET=wget\n");
	    request.setReturnFilename("wget.sh");
	    mime = "application/x-sh";
	} else 	if(what.equals("csvapi")) {
	    sb.append("#This was generated by RAMADDA to download the given entry files\n");
	    sb.append("WGET=wget\n");
	    request.setReturnFilename("csvget.sh");	    
	    mime = "application/x-sh";
	}
	HashSet<String> seen = new HashSet<String>();
	for(Entry entry: entries) {
	    if(what.equals("ids")) {
		sb.append(entry.getId());
		sb.append("\n");
	    } else  if(what.equals("wget") || what.equals("csvapi")) {
		if(what.equals("wget")) {
		    if(!entry.isFile()) {
			sb.append("#entry: " + entry.getName() +" is not a file\n");
			continue;
		    }
		} else {
		    if(!entry.getTypeHandler().isType("type_point")) {
			sb.append("#entry: " + entry.getName() +" is not point data\n");
			continue;
		    }
		}
		String url;
		String file;
		if(what.equals("wget")) {
		    url = getEntryManager().getEntryResourceUrl(request,  entry,ARG_INLINE_DFLT,true,true);
		    file = getStorageManager().getFileTail(entry);
		} else {
		    url =  request.entryUrl(getRepository().URL_ENTRY_SHOW, entry,
					    "output","points.product","getdata","getdata","product","points.csv","addlatlon","true");
		    file = Utils.makeID(entry.getName())+".csv";
		}
		int cnt=0;
		file = file.trim();
		String tmp=file;
		while(seen.contains(tmp)) {
		    cnt++;
		    tmp = cnt+"_" + file;
		}
		file = tmp;
		seen.add(file);

		sb.append("echo ");
		sb.append(HU.quote("downloading " + file));
		sb.append("\n");
		sb.append("${WGET}  -q -nv --no-check-certificate -O ");
		sb.append(HU.quote(file));
		sb.append(" ");
		sb.append(HU.quote(request.getAbsoluteUrl(url)));
		sb.append("\n");
	    }

	}
        return new Result("", sb, mime);
	
    }


    public Result listEntries(Request request, List<Entry> entries)
            throws Exception {
	InputStream is =IO.pipeIt(new IO.PipedThing(){
		public void run(OutputStream os) {
		    PrintStream           pw  = new PrintStream(os);
		    try {
			listEntries(request, pw,entries);
		    } catch(Exception exc) {
			getLogManager().logError("Making CSV",exc);
			pw.println("Making JSON:" + exc);
		    }
		}});
	return  makeStream(request, is);
    }
    


    public void listEntries(Request request, Appendable sb,List<Entry> entries)
	throws Exception {	


        String  delimiter      = request.getString(ARG_DELIMITER, ",");
        boolean fixedWidth     = request.get(ARG_FIXEDWIDTH, false);
        boolean showFullHeader = request.get(ARG_FULLHEADER, false);
        boolean showHeader     = request.get("showheader", true);
        boolean escape = request.get("escape", false) || showFullHeader;
        String filler = request.getString("filler", " ");

        String fieldsArg =
            request.getString(
                ARG_FIELDS,
                "name,id,type,description,startdate,enddate,entry_url,north,south,east,west,url,fields");

        StringBuffer header      = new StringBuffer();
        List<String> toks        = Utils.split(fieldsArg, ",", true, true);
        List<String> fieldNames  = new ArrayList<String>();
        List<String> fieldLabels = new ArrayList<String>();
        for (int i = 0; i < toks.size(); i++) {
            String       tok   = toks.get(i);
            String       field = tok;
            String       label = tok;
            List<String> pair  = Utils.splitUpTo(tok, ";", 2);
            if (pair.size() > 1) {
                field = pair.get(0);
                label = pair.get(1);
            }
            fieldNames.add(field);
            fieldLabels.add(label);
            if (header.length() > 0) {
                header.append(",");
            }
            String type = "string";
            if (field.equals("type")) {
                type = "enumeration";
            } else if (field.equals("icon")) {
                type = "image";
            } else if (field.equals("startdate")) {
                type = "date";
            } else if (field.equals("enddate")) {
                type = "date";				
            } else if (field.equals("entry_url")) {
                type = "url";
            } else if (field.equals("url")) {
                type = "url";
            } else if (field.equals("latitude")) {
                type = "double";
            } else if (field.equals("longitude")) {
                type = "double";
            } else if (field.equals("north")) {
                type = "double";
            } else if (field.equals("south")) {
                type = "double";
            } else if (field.equals("east")) {
                type = "double";
            } else if (field.equals("west")) {
                type = "double";
            } else if (field.equals("description")) {}
            else if (field.equals("size")) {
                type = "integer";
            }
            if (showHeader) {
		addHeader(header, field, label, type, escape,
			  showFullHeader);
            }
        }


        int[] maxStringSize = null;
        for (Entry entry : entries) {
            List<Column> columns = entry.getTypeHandler().getColumns();
            if (columns == null) {
                continue;
            }
            if ((maxStringSize == null)
                    || (maxStringSize.length < columns.size())) {
                maxStringSize = new int[columns.size()];
                for (int i = 0; i < maxStringSize.length; i++) {
                    maxStringSize[i] = 0;
                }
            }
            for (int col = 0; col < columns.size(); col++) {
                Column column = columns.get(col);
                if ( !column.getCanExport()) {
                    continue;
                }
                if (column.isString()) {
                    String s = sanitize(escape,
                                        (String)entry.getValue(request,column));
		    if(s!=null)
			maxStringSize[col] = Math.max(maxStringSize[col],
						      s.length());
                }
            }
        }

        if (maxStringSize != null) {
            //            for (int i = 0; i < maxStringSize.length; i++) {
            //                System.err.println("i:" + i + " " + maxStringSize[i]);
            //            }
        }

        Hashtable<String, Column> columnMap = null;

	int entryCnt=0;
        for (Entry entry : entries) {
	    entryCnt++;
            if (entryCnt==1) {
		String headerString =header.toString();
                if (fieldNames.contains("fields")) {
                    List<Column> columns =
                        entry.getTypeHandler().getColumns();

                    if (columns != null) {
                        String tmp = null;
                        int    cnt = 0;
                        for (int col = 0; col < columns.size(); col++) {
                            Column column = columns.get(col);
                            if ( !column.getCanExport()) {
                                continue;
                            }
                            if (tmp == null) {
                                tmp = ",";
                            } else {
                                tmp += ",";
                            }
                            tmp += column.getName();
                            if (fixedWidth) {
                                tmp += ((maxStringSize[col] > 0)
                                        ? "(max:" + maxStringSize[col] + ")"
                                        : "");
                            }

                        }
                        if (tmp == null) {
                            tmp = "";
                        }
                        headerString = headerString.replace(",fields", tmp);
                    }
                }
                if (showFullHeader) {
                    sb.append("#fields=");
                }
                sb.append(headerString);
                sb.append("\n");
            }

            int      colCnt = 0;
            for (String field : fieldNames) {
                if (colCnt != 0) {
                    sb.append(delimiter);
                }
                colCnt++;
                if (field.equals("name")) {
                    sb.append(sanitize(escape, entry.getName()));
                } else if (field.equals("startdate")) {
                    sb.append(getDateHandler().formatDate(request, entry,entry.getStartDate()));
                } else if (field.equals("enddate")) {
                    sb.append(getDateHandler().formatDate(request, entry,entry.getEndDate()));
                } else if (field.equals("fullname")) {
                    sb.append(sanitize(escape, entry.getFullName()));
                } else if (field.equals("type")) {
                    sb.append(entry.getTypeHandler().getType());
                } else if (field.equals("icon")) {
                    sb.append(getPageHandler().getIconUrl(request, entry));
                } else if (field.equals("id")) {
                    sb.append(entry.getId());
                } else if (field.equals("entry_url")) {
                    String url = request.makeUrl(repository.URL_ENTRY_SHOW,
                                     ARG_ENTRYID, entry.getId());
                    url = HtmlUtils.urlEncodeSpace(url);
                    url = request.getAbsoluteUrl(url);
                    sb.append(url);
                } else if (field.equals("url")) {
                    if (entry.getResource().isUrl()) {
                        sb.append(
                            entry.getTypeHandler().getPathForEntry(
								   request, entry,false));
                    } else if (entry.getResource().isFile()) {
                        String url =
                            entry.getTypeHandler().getEntryResourceUrl(
                                request, entry);
                        url = HtmlUtils.urlEncodeSpace(url);
                        url = request.getAbsoluteUrl(url);
                        sb.append(url);
                    } else {}
                } else if (field.equals("latitude")) {
                    sb.append(""+entry.getLatitude(request));
                } else if (field.equals("longitude")) {
                    sb.append(""+entry.getLongitude(request));
                } else if (field.equals("north")) {
                    sb.append(""+entry.getNorth(request));
                } else if (field.equals("south")) {
                    sb.append(""+entry.getSouth(request));
                } else if (field.equals("east")) {
                    sb.append(""+entry.getEast(request));
                } else if (field.equals("west")) {
                    sb.append(""+entry.getWest(request));
                } else if (field.equals("description")) {
                    sb.append(sanitize(escape, entry.getDescription()));
                } else if (field.equals("size")) {
                    sb.append(""+entry.getResource().getFileSize());
                } else if (field.equals("fields")) {
                    List<Column> columns =
                        entry.getTypeHandler().getColumns();
                    if (columns != null) {
                        int cnt = 0;
                        for (int col = 0; col < columns.size(); col++) {
                            Column column = columns.get(col);
                            if ( !column.getCanExport()) {
                                continue;
                            }
                            if (cnt > 0) {
                                sb.append(delimiter);
                            }
                            String s = sanitize(escape,entry.getStringValue(request, column,null));
                            sb.append(s);
                            if (fixedWidth) {
                                if (column.isString()) {
                                    int length = s.length();
                                    while (length < maxStringSize[col]) {
                                        sb.append(filler);
                                        length++;
                                    }
                                }
                            }
                            cnt++;
                        }
                    }
                } else {
                    if (columnMap == null) {
                        columnMap = new Hashtable<String, Column>();
                        List<Column> columns =
                            entry.getTypeHandler().getColumns();
                        if (columns != null) {
                            for (int col = 0; col < columns.size(); col++) {
                                Column column = columns.get(col);
                                if ( !column.getCanExport()) {
                                    continue;
                                }
                                columnMap.put(column.getName(), column);
                            }
                        }
                    }
                    Column column = columnMap.get(field);
                    if (column != null) {
                        String s = sanitize(escape,entry.getStringValue(request,column,""));
                        sb.append(s);
                        if (fixedWidth) {
                            if (column.isString()) {
                                int length = s.length();
                                while (length
                                        < maxStringSize[column.getColumnIndex()]) {
                                    sb.append(filler);
                                    length++;
                                }
                            }
                        }
                    } else {
                        sb.append("unknown:" + field);
                    }
                }
            }
            sb.append("\n");
        }


    }

    /**
     *
     * @param sb _more_
     * @param s _more_
     * @param label _more_
     * @param type _more_
     * @param escape _more_
     * @param full _more_
     *
     * @throws Exception _more_
     */
    private void addHeader(Appendable sb, String s, String label,
                           String type, boolean escape, boolean full)
            throws Exception {
        sb.append(sanitize(escape, s));
        if (full) {
            sb.append("[");
            sb.append(" type=\"" + ((type != null)
                                    ? type
                                    : "string") + "\" ");
            if (label != null) {
                sb.append(" label=\"" + sanitize(true, label) + "\" ");
            }
            sb.append("]");
        }
    }

    /**
     * _more_
     *
     *
     * @param escape _more_
     * @param s _more_
     *
     * @return _more_
     */
    public String sanitize(boolean escape, String s) {
        if (s == null) {
            return "";
        }
	if(!escape) {
	    return Seesv.cleanColumnValue(s);
	}
        s = s.replaceAll("\r\n", " ");
        s = s.replaceAll("\r", " ");
        s = s.replaceAll("\n", " ");
        //quote the columns that have commas in them
        if (s.indexOf(",") >= 0) {
            if (escape) {
                s = s.replaceAll(",", "_comma_");
            } else {
                //Not sure how to escape the quotes
                s = s.replaceAll("\"", "'");
                //wrap in a quote
                s = "\"" + s + "\"";
            }
        }

        return s;
    }


    /**
     * _more_
     *
     * @param request _more_
     * @param typeHandlers _more_
     *
     * @return _more_
     *
     * @throws Exception _more_
     */
    public Result listTypes(Request request, List<TypeHandler> typeHandlers)
            throws Exception {
        StringBuffer sb = new StringBuffer();
        for (TypeHandler theTypeHandler : typeHandlers) {
            sb.append(SqlUtil.comma(theTypeHandler.getType(),
                                    theTypeHandler.getDescription()));
            sb.append("\n");
        }

        return new Result("", sb, getMimeType(OUTPUT_CSV));
    }





    /**
     * _more_
     *
     * @param output _more_
     *
     * @return _more_
     */
    public String getMimeType(OutputType output) {
        if (output.equals(OUTPUT_CSV)) {
            return repository.getMimeTypeFromSuffix(".csv");
        }

        return super.getMimeType(output);
    }

    /**
     * _more_
     *
     * @param request _more_
     * @param outputType _more_
     * @param group _more_
     * @param children _more_
     *
     * @return _more_
     *
     * @throws Exception _more_
     */
    @Override
    public Result outputGroup(Request request, OutputType outputType,
                              Entry group, List<Entry> children)
            throws Exception {
	//Handle the "Choose" type from the entry search
	String what = request.getString("what","");

	if(what.equals("json")) {
	    return getRepository().getJsonOutputHandler().outputGroup(request,
								      JsonOutputHandler.OUTPUT_JSON,
								      group, children);
	}

        if (!what.equals("csv") && OUTPUT_IDS.equals(outputType)) {
            return listIds(request, children);
	}
        if (group.isDummy()) {
            request.setReturnFilename("results.csv");
        } else {
            request.setReturnFilename(group.getName() + ".csv");
        }
        if (OUTPUT_ENTRYCSV.equals(outputType)) {
            List<Entry> tmp = new ArrayList<Entry>();
            tmp.add(group);

            return listEntries(request, tmp);
        }

        return listEntries(request, children);
    }



}

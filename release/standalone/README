
###################################################################
RAMADDA Home Directory
###################################################################
RAMADDA, on both Un*x and Windows, requires a home directory where it creates the DB,
saves files, etc.
There is documentation here: https://ramadda.org/repository/userguide/installing.html

You will need to create this directory. By default RAMADDA looks for:
<user home directory>/.ramadda

You can override the home directory (see below or in ramadda.bat) a number of ways.
You can set the environment variable:
RAMADDA_HOME=/some/other/directory/ramadda

You can set the environment variable with the Java command line argument:
-DRAMADDA_HOME=/some/other/directory/ramadda 

Or pass in a regular  command line argument to RAMADDA:
-home /some/other/directory/ramadda 

When RAMADDA first starts up it writes an install.properties file that contains an
install password and prints out this password to stdout.
ramadda.install.password=<some password>
You will need this password when doing the final web-based  RAMADDA configuration


###################################################################
Initial setup on Un*x systems
###################################################################

Here is the recommended setup to run RAMADDA stand-alone.
Create a ramadda directory to hold the @RELEASE@ release 
and copy the ramaddaenv.sh file from the release directory
to the ramadda directory.

Looks like:
ramadda
      @RELEASE@
      ramaddaenv.sh

Edit the copied ramaddaenv.sh to point to where Java is located, what port to run 
RAMADDA on and where is the RAMADDA home directory.

RAMADDA requires Java 1.8 or above to run.

To run RAMADDA just do:

   sh @RELEASE@/ramadda.sh

By default this  will run RAMADDA on port 8080 with the RAMADDA home 
directory (where it stores everything) set to <user home>/.ramadda and 
will use a local Java Derby database.

See the Configuration section below for more details but an easy way to 
change these settings is with command line arguments:

    sh @RELEASE@/ramadda.sh -port 8081 -Dramadda_home=/some/other/directory/ramadda

See the Database section below on how to change the database

You need to complete the configuration at:
http://localhost:8080/repository

For more information see:
http://ramadda.org/repository/userguide/installing.html


###################################################################
Running as a service in the background
###################################################################

The script @RELEASE@/ramaddaService.sh can start, stop and restart a running
RAMADDA process in the background. This should be used when running
RAMADDA as a regular server.

This runs with:
sh ramaddaService.sh start
sh ramaddaService.sh stop
sh ramaddaService.sh restart
sh ramaddaService.sh status




###################################################################
Configuration
###################################################################

The ramadda.sh script runs the stand-alone version of RAMADDA.
The script uses the environment variables:
RAMADDA_HOME - The directory RAMADDA stores everything in.  Defaults to <user home>/.ramadda

RAMADDA_PORT - The port that RAMADDA runs on. Defaults to 8080 or 80 in windows

JAVA - Path to the Java executable. Defaults to "java"
For windows this checks for JAVA_HOME where java is at:
%JAVA_HOME%\bin\java

If not set by the calling process the script sets the RAMADDA_HOME, 
RAMADDA_PORT  and JAVA variables to the defaults then runs the ramaddaenv.sh 
in the release directory.  Then, if it exists, the script execs ramaddaenv.sh
in the parent directory of the release directory.


###################################################################
Plugins
###################################################################
When you start RAMADDA it will create a plugins directory under the RAMADDA
home directory. During the web-based initialization you can choose  to install
the following plugins. It is recommended to install all of the plugins (except the
bioplugins). They pretty much just provide different entry types
coreplugins: 
geoplugins: Lots of geoscience related data and services
miscplugins:
bioplugins: bioscience data

There are some other plugin files available via ramadda.org (https://ramadda.org/repository/alias/release/)
which you can install in the plugins directory.

When you re-install a new version of RAMADDA any plugins you have installed previously
will get updated.



###################################################################
Database
###################################################################
By default this uses the built-in Java Derby database. Derby is quite 
capable but it lacks certain features and might not be as performant
as other databases.

If you want to use a different database (e.g., mysql, postgres, oracle, H2) see:
http://ramadda.org/repository/userguide/database.html






